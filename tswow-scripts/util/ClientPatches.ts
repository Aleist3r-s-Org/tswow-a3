 export interface ClientPatch {
    address: number
    values: number[]
}

export interface ClientPatchCat {
    name: string
    patches: ClientPatch[]
}

export function patch(name: string, patches: [number,number[]][]): ClientPatchCat
{
    return {name,patches:patches.map(x=>({address:x[0],values:x[1]}))}
}

export const EXTENSION_DLL_PATCH_NAME = 'client-extensions'
export const ITEM_DBC_DISABLER_PATCH_NAME = 'item-dbc-disabler'
export const FIX_COMBO_POINT_PATCH_NAME = 'fix-combo-points'

export function ClientPatches(
    gamebuild: number
    , roles: {class:number,tank:number,healer:number,damage:number,leader:number}[]
    ) {
        let rolemask: number[] = new Array(32).fill(0)
        roles.forEach(x=>{
            rolemask[x.class-1] =
              (x.leader ? 1 : 0)
            | (x.tank   ? 2 : 0)
            | (x.healer ? 4 : 0)
            | (x.damage ? 8 : 0)
        })
        return [
            patch('view-distance-unlock',[
                [0x63CF0C, [0x00, 0x40, 0x1C, 0x46, 0x00, 0x40, 0x1C, 0x46]],
            ]),
            patch(FIX_COMBO_POINT_PATCH_NAME,[
                [0x210B07, [0xEB]],
            ]),
            patch('allow-custom-gluexml',[
                [0x1F41BF, [0xEB]],
                [0x415A25, [0xEB]],
                [0x415A3F, [0x03]],
                [0x415A95, [0x03]],
                [0x415B46, [0xEB]],
                [0x415B5F, [0xB8, 0x03]],
                [0x415B61, [0x00, 0x00, 0x00, 0xEB, 0xED]],
            ]),
            patch('unlimited race/class pairs patch', [
                [0xE0355, [0x78]],
                [0xE038E, [0x88]],
                [0xE03A3, [0x88]],
                [0xE03C3, [0x88]],
            ]),
            patch('class roles',[
                // role mask cave
                [0x857C00, [0,...rolemask]],
                // xrefs
                [0x151D48, [0x00, 0xD0, 0xEF, 0x00]],
                [0x152F7D, [0x00, 0xD0, 0xEF, 0x00]],
                [0x152F94, [0x00, 0xD0, 0xEF, 0x00]],
                [0x1531E7, [0x00, 0xD0, 0xEF, 0x00]],
                [0x153D22, [0x00, 0xD0, 0xEF, 0x00]],
            ]),
            patch(EXTENSION_DLL_PATCH_NAME,[
                // stage
                [0x28E19C, [
                    // Jump to hook (replaces "LoadLibraryA")
                    0xE9, 0x5F, 0xE2, 0x76, 0x00,
                    // pad old instruction
                    0x90
                ]],

                // cave
                [0x757C00, [
                    // call "LoadLibraryA" (for d3d9.dll) (this is what we jump to)
                    0xFF, 0x15, 0x48, 0xF2, 0x9D, 0x00,
                    // push all registers
                    0x60,
                    // push "ClientExtensions.dll" string (see below)
                    0x68, 0x20, 0xD0, 0xEF, 0x00,
                    // call "LoadLibraryA" (for ClientExtensions.dll)
                    0xFF, 0x15, 0x48, 0xF2, 0x9D, 0x00,
                    // pop all registers
                    0x61,
                    // jump back
                    0xE9, 0x8A, 0x1D, 0x89, 0xFF
                ]],
                // "ClientExtensions.dll" string
                [0x857C20, [0x43, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6E, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x2E, 0x64, 0x6C, 0x6C]]
            ]),
            patch('gamebuild',[
                [0x4C99F0, [
                    gamebuild&0xff,
                    (gamebuild>>8)&0xff
                ]]
            ]),
            patch('get-selected-background-model-dehardcoding', [
                // Aleist3r: technically it could've been done in just 3 jumps but it did leave a lot of dead code
                // this way it consolidates used code and makes single chunk of free space after last 0xC3 up to end of 0xCC array
                [0xE2A83, [0x25]],
                [0xE2A8B, [0x1D]],
                [0xE2A95, [
                    0x0F, 0xB6, 0x80, 0x78, 0x01, 0x00, 0x00, 0x50, 0xB9, 0x40, 0x34, 0xAD, 0x00, 0xE8, 0xE9, 0x8B,
                    0x17, 0x00, 0xEB, 0x23, 0xA1, 0x38, 0x34, 0xAD, 0x00, 0x83, 0xF8, 0x02, 0x7F, 0x33, 0x83, 0x3D,
                    0x34, 0x34, 0xAD, 0x00, 0x02, 0x7C, 0x2A, 0x8B, 0x15, 0x48, 0x34, 0xAD, 0x00, 0xB9, 0x02, 0x00,
                    0x00, 0x00, 0x2B, 0xC8, 0x8B, 0x04, 0x8A, 0x85, 0xC0, 0x74, 0x16, 0x8B, 0x40, 0x2C, 0x50, 0x57,
                    0xE8, 0x76, 0xAC, 0x36, 0x00, 0x83, 0xC4, 0x08, 0x5E, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x5F, 0x5D,
                    0xC3, 0xB8, 0xFF, 0x14, 0x9E, 0x00, 0x50, 0x57, 0xE8, 0xE5, 0xAC, 0x36, 0x00, 0x83, 0xC4, 0x08,
                    0x5E, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x5F, 0x5D, 0xC3
                ]],
                // padding remains
                [0xE2AFE, [
                    0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
                    0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
                    0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
                    0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
                    0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
                    0xCC, 0xCC, 0xCC, 0xCC
                ]]
            ]),
        ]
}
